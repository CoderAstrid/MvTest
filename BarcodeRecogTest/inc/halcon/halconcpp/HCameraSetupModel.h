/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 19.05
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HCAMERASETUPMODEL
#define HCPP_HCAMERASETUPMODEL

namespace HalconCpp
{

// Represents an instance of a camera setup model.
class LIntExport HCameraSetupModel : public HHandle
{

public:

  // Create an uninitialized instance
  HCameraSetupModel():HHandle() {}

  // Copy constructor
  HCameraSetupModel(const HCameraSetupModel& source) : HHandle(source) {}

  // Copy constructor
  HCameraSetupModel(const HHandle& handle);

  bool operator==(const HHandle& obj) const
  {
    return HHandleBase::operator==(obj);
  }

  bool operator!=(const HHandle& obj) const
  {
    return HHandleBase::operator!=(obj);
  }

protected:

  // Verify matching semantic type ('camera_setup_model')!
  virtual void AssertType(Hphandle handle) const;

public:

  // Deep copy of all data represented by this object instance
  HCameraSetupModel Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_camera_setup_model: Restore a camera setup model from a file.
  explicit HCameraSetupModel(const HString& FileName);

  // read_camera_setup_model: Restore a camera setup model from a file.
  explicit HCameraSetupModel(const char* FileName);

#ifdef _WIN32
  // read_camera_setup_model: Restore a camera setup model from a file.
  explicit HCameraSetupModel(const wchar_t* FileName);
#endif

  // create_camera_setup_model: Create a model for a setup of calibrated cameras.
  explicit HCameraSetupModel(Hlong NumCameras);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Create a HALCON stereo model.
  HStereoModel CreateStereoModel(const HString& Method, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Create a HALCON stereo model.
  HStereoModel CreateStereoModel(const HString& Method, const HString& GenParamName, const HTuple& GenParamValue) const;

  // Create a HALCON stereo model.
  HStereoModel CreateStereoModel(const char* Method, const char* GenParamName, const HTuple& GenParamValue) const;

#ifdef _WIN32
  // Create a HALCON stereo model.
  HStereoModel CreateStereoModel(const wchar_t* Method, const wchar_t* GenParamName, const HTuple& GenParamValue) const;
#endif

  // Free the memory of a calibration setup model.
  void ClearCameraSetupModel() const;

  // Serialize a camera setup model.
  HSerializedItem SerializeCameraSetupModel() const;

  // Deserialize a serialized camera setup model.
  void DeserializeCameraSetupModel(const HSerializedItem& SerializedItemHandle);

  // Store a camera setup model into a file.
  void WriteCameraSetupModel(const HString& FileName) const;

  // Store a camera setup model into a file.
  void WriteCameraSetupModel(const char* FileName) const;

#ifdef _WIN32
  // Store a camera setup model into a file.
  void WriteCameraSetupModel(const wchar_t* FileName) const;
#endif

  // Restore a camera setup model from a file.
  void ReadCameraSetupModel(const HString& FileName);

  // Restore a camera setup model from a file.
  void ReadCameraSetupModel(const char* FileName);

#ifdef _WIN32
  // Restore a camera setup model from a file.
  void ReadCameraSetupModel(const wchar_t* FileName);
#endif

  // Get generic camera setup model parameters.
  HTuple GetCameraSetupParam(const HTuple& CameraIdx, const HString& GenParamName) const;

  // Get generic camera setup model parameters.
  HTuple GetCameraSetupParam(Hlong CameraIdx, const HString& GenParamName) const;

  // Get generic camera setup model parameters.
  HTuple GetCameraSetupParam(Hlong CameraIdx, const char* GenParamName) const;

#ifdef _WIN32
  // Get generic camera setup model parameters.
  HTuple GetCameraSetupParam(Hlong CameraIdx, const wchar_t* GenParamName) const;
#endif

  // Set generic camera setup model parameters.
  void SetCameraSetupParam(const HTuple& CameraIdx, const HString& GenParamName, const HTuple& GenParamValue) const;

  // Set generic camera setup model parameters.
  void SetCameraSetupParam(Hlong CameraIdx, const HString& GenParamName, double GenParamValue) const;

  // Set generic camera setup model parameters.
  void SetCameraSetupParam(Hlong CameraIdx, const char* GenParamName, double GenParamValue) const;

#ifdef _WIN32
  // Set generic camera setup model parameters.
  void SetCameraSetupParam(Hlong CameraIdx, const wchar_t* GenParamName, double GenParamValue) const;
#endif

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HTuple& CameraIdx, const HTuple& CameraType, const HCamPar& CameraParam, const HTuple& CameraPose) const;

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HTuple& CameraIdx, const HString& CameraType, const HCamPar& CameraParam, const HTuple& CameraPose) const;

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HTuple& CameraIdx, const char* CameraType, const HCamPar& CameraParam, const HTuple& CameraPose) const;

#ifdef _WIN32
  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HTuple& CameraIdx, const wchar_t* CameraType, const HCamPar& CameraParam, const HTuple& CameraPose) const;
#endif

  // Create a model for a setup of calibrated cameras.
  void CreateCameraSetupModel(Hlong NumCameras);

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HHandleBaseArrayRef;

typedef HHandleBaseArrayRef<HCameraSetupModel> HCameraSetupModelArrayRef;
typedef HSmartPtr< HCameraSetupModelArrayRef > HCameraSetupModelArrayPtr;


// Represents multiple tool instances
class LIntExport HCameraSetupModelArray : public HHandleBaseArray
{

public:

  // Create empty array
  HCameraSetupModelArray();

  // Create array from native array of tool instances
  HCameraSetupModelArray(HCameraSetupModel* classes, Hlong length);

  // Copy constructor
  HCameraSetupModelArray(const HCameraSetupModelArray &tool_array);

  // Destructor
  virtual ~HCameraSetupModelArray();

  // Assignment operator
  HCameraSetupModelArray &operator=(const HCameraSetupModelArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HCameraSetupModel* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HCameraSetupModelArrayPtr *mArrayPtr;
};

}

#endif
