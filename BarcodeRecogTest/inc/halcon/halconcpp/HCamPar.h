/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 19.05
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HCAMPAR
#define HCPP_HCAMPAR

namespace HalconCpp
{

// Represents internal camera parameters.
class LIntExport HCamPar : public HDataBase
{

public:

  // Create an uninitialized instance
  HCamPar():HDataBase() {}

  // Copy constructor
  HCamPar(const HCamPar& source) : HDataBase(source) {}

  // Constructor from HTuple
  explicit HCamPar(const HTuple& tuple) : HDataBase(tuple) {}

  // Deep copy of all data represented by this object instance
  HCamPar Clone() const;




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
  HImage BinocularDistanceMs(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, Hlong MinDisparity, Hlong MaxDisparity, Hlong SurfaceSmoothing, Hlong EdgeSmoothing, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
  HImage BinocularDistanceMs(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, Hlong MinDisparity, Hlong MaxDisparity, Hlong SurfaceSmoothing, Hlong EdgeSmoothing, const HString& GenParamName, const HString& GenParamValue) const;

  // Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
  HImage BinocularDistanceMs(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, Hlong MinDisparity, Hlong MaxDisparity, Hlong SurfaceSmoothing, Hlong EdgeSmoothing, const char* GenParamName, const char* GenParamValue) const;

#ifdef _WIN32
  // Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
  HImage BinocularDistanceMs(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, Hlong MinDisparity, Hlong MaxDisparity, Hlong SurfaceSmoothing, Hlong EdgeSmoothing, const wchar_t* GenParamName, const wchar_t* GenParamValue) const;
#endif

  // Compute the distance values for a rectified stereo image pair using multigrid methods.
  HImage BinocularDistanceMg(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, double GrayConstancy, double GradientConstancy, double Smoothness, double InitialGuess, const HString& CalculateScore, const HTuple& MGParamName, const HTuple& MGParamValue) const;

  // Compute the distance values for a rectified stereo image pair using multigrid methods.
  HImage BinocularDistanceMg(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, double GrayConstancy, double GradientConstancy, double Smoothness, double InitialGuess, const HString& CalculateScore, const HString& MGParamName, const HString& MGParamValue) const;

  // Compute the distance values for a rectified stereo image pair using multigrid methods.
  HImage BinocularDistanceMg(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, double GrayConstancy, double GradientConstancy, double Smoothness, double InitialGuess, const char* CalculateScore, const char* MGParamName, const char* MGParamValue) const;

#ifdef _WIN32
  // Compute the distance values for a rectified stereo image pair using multigrid methods.
  HImage BinocularDistanceMg(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, double GrayConstancy, double GradientConstancy, double Smoothness, double InitialGuess, const wchar_t* CalculateScore, const wchar_t* MGParamName, const wchar_t* MGParamValue) const;
#endif

  // Compute the fundamental matrix from the relative orientation of two cameras.
  HHomMat2D RelPoseToFundamentalMatrix(const HPose& RelPose, const HTuple& CovRelPose, const HCamPar& CamPar2, HTuple* CovFMat) const;

  // Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
  HPose VectorToRelPose(const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HTuple& CovRR1, const HTuple& CovRC1, const HTuple& CovCC1, const HTuple& CovRR2, const HTuple& CovRC2, const HTuple& CovCC2, const HCamPar& CamPar2, const HString& Method, HTuple* CovRelPose, HTuple* Error, HTuple* X, HTuple* Y, HTuple* Z, HTuple* CovXYZ) const;

  // Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
  HPose VectorToRelPose(const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HTuple& CovRR1, const HTuple& CovRC1, const HTuple& CovCC1, const HTuple& CovRR2, const HTuple& CovRC2, const HTuple& CovCC2, const HCamPar& CamPar2, const HString& Method, HTuple* CovRelPose, double* Error, HTuple* X, HTuple* Y, HTuple* Z, HTuple* CovXYZ) const;

  // Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
  HPose VectorToRelPose(const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HTuple& CovRR1, const HTuple& CovRC1, const HTuple& CovCC1, const HTuple& CovRR2, const HTuple& CovRC2, const HTuple& CovCC2, const HCamPar& CamPar2, const char* Method, HTuple* CovRelPose, double* Error, HTuple* X, HTuple* Y, HTuple* Z, HTuple* CovXYZ) const;

#ifdef _WIN32
  // Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
  HPose VectorToRelPose(const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HTuple& CovRR1, const HTuple& CovRC1, const HTuple& CovCC1, const HTuple& CovRR2, const HTuple& CovRC2, const HTuple& CovCC2, const HCamPar& CamPar2, const wchar_t* Method, HTuple* CovRelPose, double* Error, HTuple* X, HTuple* Y, HTuple* Z, HTuple* CovXYZ) const;
#endif

  // Compute the relative orientation between two cameras by automatically finding correspondences between image points.
  HPose MatchRelPoseRansac(const HImage& Image1, const HImage& Image2, const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HCamPar& CamPar2, const HString& GrayMatchMethod, Hlong MaskSize, Hlong RowMove, Hlong ColMove, Hlong RowTolerance, Hlong ColTolerance, const HTuple& Rotation, const HTuple& MatchThreshold, const HString& EstimationMethod, const HTuple& DistanceThreshold, Hlong RandSeed, HTuple* CovRelPose, HTuple* Error, HTuple* Points1, HTuple* Points2) const;

  // Compute the relative orientation between two cameras by automatically finding correspondences between image points.
  HPose MatchRelPoseRansac(const HImage& Image1, const HImage& Image2, const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HCamPar& CamPar2, const HString& GrayMatchMethod, Hlong MaskSize, Hlong RowMove, Hlong ColMove, Hlong RowTolerance, Hlong ColTolerance, double Rotation, Hlong MatchThreshold, const HString& EstimationMethod, double DistanceThreshold, Hlong RandSeed, HTuple* CovRelPose, double* Error, HTuple* Points1, HTuple* Points2) const;

  // Compute the relative orientation between two cameras by automatically finding correspondences between image points.
  HPose MatchRelPoseRansac(const HImage& Image1, const HImage& Image2, const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HCamPar& CamPar2, const char* GrayMatchMethod, Hlong MaskSize, Hlong RowMove, Hlong ColMove, Hlong RowTolerance, Hlong ColTolerance, double Rotation, Hlong MatchThreshold, const char* EstimationMethod, double DistanceThreshold, Hlong RandSeed, HTuple* CovRelPose, double* Error, HTuple* Points1, HTuple* Points2) const;

#ifdef _WIN32
  // Compute the relative orientation between two cameras by automatically finding correspondences between image points.
  HPose MatchRelPoseRansac(const HImage& Image1, const HImage& Image2, const HTuple& Rows1, const HTuple& Cols1, const HTuple& Rows2, const HTuple& Cols2, const HCamPar& CamPar2, const wchar_t* GrayMatchMethod, Hlong MaskSize, Hlong RowMove, Hlong ColMove, Hlong RowTolerance, Hlong ColTolerance, double Rotation, Hlong MatchThreshold, const wchar_t* EstimationMethod, double DistanceThreshold, Hlong RandSeed, HTuple* CovRelPose, double* Error, HTuple* Points1, HTuple* Points2) const;
#endif

  // Compute the distance values for a rectified stereo image pair using correlation techniques.
  HImage BinocularDistance(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, const HString& Method, Hlong MaskWidth, Hlong MaskHeight, const HTuple& TextureThresh, Hlong MinDisparity, Hlong MaxDisparity, Hlong NumLevels, const HTuple& ScoreThresh, const HTuple& Filter, const HTuple& SubDistance) const;

  // Compute the distance values for a rectified stereo image pair using correlation techniques.
  HImage BinocularDistance(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, const HString& Method, Hlong MaskWidth, Hlong MaskHeight, double TextureThresh, Hlong MinDisparity, Hlong MaxDisparity, Hlong NumLevels, double ScoreThresh, const HString& Filter, const HString& SubDistance) const;

  // Compute the distance values for a rectified stereo image pair using correlation techniques.
  HImage BinocularDistance(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, const char* Method, Hlong MaskWidth, Hlong MaskHeight, double TextureThresh, Hlong MinDisparity, Hlong MaxDisparity, Hlong NumLevels, double ScoreThresh, const char* Filter, const char* SubDistance) const;

#ifdef _WIN32
  // Compute the distance values for a rectified stereo image pair using correlation techniques.
  HImage BinocularDistance(const HImage& ImageRect1, const HImage& ImageRect2, HImage* Score, const HCamPar& CamParamRect2, const HPose& RelPoseRect, const wchar_t* Method, Hlong MaskWidth, Hlong MaskHeight, double TextureThresh, Hlong MinDisparity, Hlong MaxDisparity, Hlong NumLevels, double ScoreThresh, const wchar_t* Filter, const wchar_t* SubDistance) const;
#endif

  // Get a 3D point from the intersection of two lines of sight within a binocular camera system.
  void IntersectLinesOfSight(const HCamPar& CamParam2, const HPose& RelPose, const HTuple& Row1, const HTuple& Col1, const HTuple& Row2, const HTuple& Col2, HTuple* X, HTuple* Y, HTuple* Z, HTuple* Dist) const;

  // Get a 3D point from the intersection of two lines of sight within a binocular camera system.
  void IntersectLinesOfSight(const HCamPar& CamParam2, const HPose& RelPose, double Row1, double Col1, double Row2, double Col2, double* X, double* Y, double* Z, double* Dist) const;

  // Transform a disparity image into 3D points in a rectified stereo system.
  HImage DisparityImageToXyz(const HImage& Disparity, HImage* Y, HImage* Z, const HCamPar& CamParamRect2, const HPose& RelPoseRect) const;

  // Transform an image point and its disparity into a 3D point in a rectified stereo system.
  void DisparityToPoint3d(const HCamPar& CamParamRect2, const HPose& RelPoseRect, const HTuple& Row1, const HTuple& Col1, const HTuple& Disparity, HTuple* X, HTuple* Y, HTuple* Z) const;

  // Transform an image point and its disparity into a 3D point in a rectified stereo system.
  void DisparityToPoint3d(const HCamPar& CamParamRect2, const HPose& RelPoseRect, double Row1, double Col1, double Disparity, double* X, double* Y, double* Z) const;

  // Transform a disparity value into a distance value in a rectified binocular stereo system.
  HTuple DisparityToDistance(const HCamPar& CamParamRect2, const HPose& RelPoseRect, const HTuple& Disparity) const;

  // Transform a disparity value into a distance value in a rectified binocular stereo system.
  double DisparityToDistance(const HCamPar& CamParamRect2, const HPose& RelPoseRect, double Disparity) const;

  // Transfrom a distance value into a disparity in a rectified stereo system.
  HTuple DistanceToDisparity(const HCamPar& CamParamRect2, const HPose& RelPoseRect, const HTuple& Distance) const;

  // Transfrom a distance value into a disparity in a rectified stereo system.
  double DistanceToDisparity(const HCamPar& CamParamRect2, const HPose& RelPoseRect, double Distance) const;

  // Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.
  HImage GenBinocularRectificationMap(HImage* Map2, const HCamPar& CamParam2, const HPose& RelPose, double SubSampling, const HString& Method, const HString& MapType, HCamPar* CamParamRect1, HCamPar* CamParamRect2, HPose* CamPoseRect1, HPose* CamPoseRect2, HPose* RelPoseRect) const;

  // Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.
  HImage GenBinocularRectificationMap(HImage* Map2, const HCamPar& CamParam2, const HPose& RelPose, double SubSampling, const char* Method, const char* MapType, HCamPar* CamParamRect1, HCamPar* CamParamRect2, HPose* CamPoseRect1, HPose* CamPoseRect2, HPose* RelPoseRect) const;

#ifdef _WIN32
  // Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.
  HImage GenBinocularRectificationMap(HImage* Map2, const HCamPar& CamParam2, const HPose& RelPose, double SubSampling, const wchar_t* Method, const wchar_t* MapType, HCamPar* CamParamRect1, HCamPar* CamParamRect2, HPose* CamPoseRect1, HPose* CamPoseRect2, HPose* RelPoseRect) const;
#endif

  // Determine all camera parameters of a binocular stereo system.
  HCamPar BinocularCalibration(const HTuple& NX, const HTuple& NY, const HTuple& NZ, const HTuple& NRow1, const HTuple& NCol1, const HTuple& NRow2, const HTuple& NCol2, const HCamPar& StartCamParam2, const HPoseArray& NStartPose1, const HPoseArray& NStartPose2, const HTuple& EstimateParams, HCamPar* CamParam2, HPoseArray* NFinalPose1, HPoseArray* NFinalPose2, HPose* RelPose, HTuple* Errors) const;

  // Determine all camera parameters of a binocular stereo system.
  HCamPar BinocularCalibration(const HTuple& NX, const HTuple& NY, const HTuple& NZ, const HTuple& NRow1, const HTuple& NCol1, const HTuple& NRow2, const HTuple& NCol2, const HCamPar& StartCamParam2, const HPose& NStartPose1, const HPose& NStartPose2, const HTuple& EstimateParams, HCamPar* CamParam2, HPose* NFinalPose1, HPose* NFinalPose2, HPose* RelPose, double* Errors) const;

  // Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
  HPoseArray FindCalibDescriptorModel(const HImage& Image, const HDescriptorModel& ModelID, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, const HTuple& MinScore, Hlong NumMatches, const HTuple& ScoreType, HTuple* Score) const;

  // Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
  HPose FindCalibDescriptorModel(const HImage& Image, const HDescriptorModel& ModelID, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, double MinScore, Hlong NumMatches, const HString& ScoreType, double* Score) const;

  // Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
  HPose FindCalibDescriptorModel(const HImage& Image, const HDescriptorModel& ModelID, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, double MinScore, Hlong NumMatches, const char* ScoreType, double* Score) const;

#ifdef _WIN32
  // Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
  HPose FindCalibDescriptorModel(const HImage& Image, const HDescriptorModel& ModelID, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, double MinScore, Hlong NumMatches, const wchar_t* ScoreType, double* Score) const;
#endif

  // Create a descriptor model for calibrated perspective matching.
  HDescriptorModel CreateCalibDescriptorModel(const HImage& Template, const HPose& ReferencePose, const HString& DetectorType, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, Hlong Seed) const;

  // Create a descriptor model for calibrated perspective matching.
  HDescriptorModel CreateCalibDescriptorModel(const HImage& Template, const HPose& ReferencePose, const char* DetectorType, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, Hlong Seed) const;

#ifdef _WIN32
  // Create a descriptor model for calibrated perspective matching.
  HDescriptorModel CreateCalibDescriptorModel(const HImage& Template, const HPose& ReferencePose, const wchar_t* DetectorType, const HTuple& DetectorParamName, const HTuple& DetectorParamValue, const HTuple& DescriptorParamName, const HTuple& DescriptorParamValue, Hlong Seed) const;
#endif

  // Prepare a deformable model for planar calibrated matching from XLD contours.
  HDeformableModel CreatePlanarCalibDeformableModelXld(const HXLDCont& Contours, const HPose& ReferencePose, const HTuple& NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, const HTuple& AngleStep, double ScaleRMin, const HTuple& ScaleRMax, const HTuple& ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, const HTuple& ScaleCStep, const HTuple& Optimization, const HString& Metric, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Prepare a deformable model for planar calibrated matching from XLD contours.
  HDeformableModel CreatePlanarCalibDeformableModelXld(const HXLDCont& Contours, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const HString& Optimization, const HString& Metric, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Prepare a deformable model for planar calibrated matching from XLD contours.
  HDeformableModel CreatePlanarCalibDeformableModelXld(const HXLDCont& Contours, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const char* Optimization, const char* Metric, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

#ifdef _WIN32
  // Prepare a deformable model for planar calibrated matching from XLD contours.
  HDeformableModel CreatePlanarCalibDeformableModelXld(const HXLDCont& Contours, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const wchar_t* Optimization, const wchar_t* Metric, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;
#endif

  // Create a deformable model for calibrated perspective matching.
  HDeformableModel CreatePlanarCalibDeformableModel(const HImage& Template, const HPose& ReferencePose, const HTuple& NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, const HTuple& AngleStep, double ScaleRMin, const HTuple& ScaleRMax, const HTuple& ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, const HTuple& ScaleCStep, const HTuple& Optimization, const HString& Metric, const HTuple& Contrast, const HTuple& MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Create a deformable model for calibrated perspective matching.
  HDeformableModel CreatePlanarCalibDeformableModel(const HImage& Template, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const HString& Optimization, const HString& Metric, const HTuple& Contrast, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Create a deformable model for calibrated perspective matching.
  HDeformableModel CreatePlanarCalibDeformableModel(const HImage& Template, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const char* Optimization, const char* Metric, const HTuple& Contrast, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

#ifdef _WIN32
  // Create a deformable model for calibrated perspective matching.
  HDeformableModel CreatePlanarCalibDeformableModel(const HImage& Template, const HPose& ReferencePose, Hlong NumLevels, const HTuple& AngleStart, const HTuple& AngleExtent, double AngleStep, double ScaleRMin, const HTuple& ScaleRMax, double ScaleRStep, double ScaleCMin, const HTuple& ScaleCMax, double ScaleCStep, const wchar_t* Optimization, const wchar_t* Metric, const HTuple& Contrast, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;
#endif

  // Project the edges of a 3D shape model into image coordinates.
  HXLDCont ProjectShapeModel3d(const HShapeModel3D& ShapeModel3DID, const HPose& Pose, const HString& HiddenSurfaceRemoval, const HTuple& MinFaceAngle) const;

  // Project the edges of a 3D shape model into image coordinates.
  HXLDCont ProjectShapeModel3d(const HShapeModel3D& ShapeModel3DID, const HPose& Pose, const HString& HiddenSurfaceRemoval, double MinFaceAngle) const;

  // Project the edges of a 3D shape model into image coordinates.
  HXLDCont ProjectShapeModel3d(const HShapeModel3D& ShapeModel3DID, const HPose& Pose, const char* HiddenSurfaceRemoval, double MinFaceAngle) const;

#ifdef _WIN32
  // Project the edges of a 3D shape model into image coordinates.
  HXLDCont ProjectShapeModel3d(const HShapeModel3D& ShapeModel3DID, const HPose& Pose, const wchar_t* HiddenSurfaceRemoval, double MinFaceAngle) const;
#endif

  // Prepare a 3D object model for matching.
  HShapeModel3D CreateShapeModel3d(const HObjectModel3D& ObjectModel3D, double RefRotX, double RefRotY, double RefRotZ, const HString& OrderOfRotation, double LongitudeMin, double LongitudeMax, double LatitudeMin, double LatitudeMax, double CamRollMin, double CamRollMax, double DistMin, double DistMax, Hlong MinContrast, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Prepare a 3D object model for matching.
  HShapeModel3D CreateShapeModel3d(const HObjectModel3D& ObjectModel3D, double RefRotX, double RefRotY, double RefRotZ, const HString& OrderOfRotation, double LongitudeMin, double LongitudeMax, double LatitudeMin, double LatitudeMax, double CamRollMin, double CamRollMax, double DistMin, double DistMax, Hlong MinContrast, const HString& GenParamName, Hlong GenParamValue) const;

  // Prepare a 3D object model for matching.
  HShapeModel3D CreateShapeModel3d(const HObjectModel3D& ObjectModel3D, double RefRotX, double RefRotY, double RefRotZ, const char* OrderOfRotation, double LongitudeMin, double LongitudeMax, double LatitudeMin, double LatitudeMax, double CamRollMin, double CamRollMax, double DistMin, double DistMax, Hlong MinContrast, const char* GenParamName, Hlong GenParamValue) const;

#ifdef _WIN32
  // Prepare a 3D object model for matching.
  HShapeModel3D CreateShapeModel3d(const HObjectModel3D& ObjectModel3D, double RefRotX, double RefRotY, double RefRotZ, const wchar_t* OrderOfRotation, double LongitudeMin, double LongitudeMax, double LatitudeMin, double LatitudeMax, double CamRollMin, double CamRollMax, double DistMin, double DistMax, Hlong MinContrast, const wchar_t* GenParamName, Hlong GenParamValue) const;
#endif

  // Remove points from a 3D object model by projecting it to a virtual view and removing all points outside of a given region.
  HObjectModel3DArray ReduceObjectModel3dByView(const HRegion& Region, const HObjectModel3DArray& ObjectModel3D, const HPoseArray& Pose) const;

  // Remove points from a 3D object model by projecting it to a virtual view and removing all points outside of a given region.
  HObjectModel3D ReduceObjectModel3dByView(const HRegion& Region, const HObjectModel3D& ObjectModel3D, const HPose& Pose) const;

  // Render 3D object models to get an image.
  HImage RenderObjectModel3d(const HObjectModel3DArray& ObjectModel3D, const HPoseArray& Pose, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Render 3D object models to get an image.
  HImage RenderObjectModel3d(const HObjectModel3D& ObjectModel3D, const HPose& Pose, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Display 3D object models.
  void DispObjectModel3d(const HWindow& WindowHandle, const HObjectModel3DArray& ObjectModel3D, const HPoseArray& Pose, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Display 3D object models.
  void DispObjectModel3d(const HWindow& WindowHandle, const HObjectModel3D& ObjectModel3D, const HPose& Pose, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Transform 3D points from a 3D object model to images.
  HImage ObjectModel3dToXyz(HImage* Y, HImage* Z, const HObjectModel3D& ObjectModel3D, const HString& Type, const HPose& Pose) const;

  // Transform 3D points from a 3D object model to images.
  HImage ObjectModel3dToXyz(HImage* Y, HImage* Z, const HObjectModel3D& ObjectModel3D, const char* Type, const HPose& Pose) const;

#ifdef _WIN32
  // Transform 3D points from a 3D object model to images.
  HImage ObjectModel3dToXyz(HImage* Y, HImage* Z, const HObjectModel3D& ObjectModel3D, const wchar_t* Type, const HPose& Pose) const;
#endif

  // Project a 3D object model into image coordinates.
  HXLDCont ProjectObjectModel3d(const HObjectModel3D& ObjectModel3D, const HPose& Pose, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Project a 3D object model into image coordinates.
  HXLDCont ProjectObjectModel3d(const HObjectModel3D& ObjectModel3D, const HPose& Pose, const HString& GenParamName, const HString& GenParamValue) const;

  // Project a 3D object model into image coordinates.
  HXLDCont ProjectObjectModel3d(const HObjectModel3D& ObjectModel3D, const HPose& Pose, const char* GenParamName, const char* GenParamValue) const;

#ifdef _WIN32
  // Project a 3D object model into image coordinates.
  HXLDCont ProjectObjectModel3d(const HObjectModel3D& ObjectModel3D, const HPose& Pose, const wchar_t* GenParamName, const wchar_t* GenParamValue) const;
#endif

  // Add a camera to a 3D scene.
  Hlong AddScene3dCamera(const HScene3D& Scene3D) const;

  // Compute the calibrated scene flow between two stereo image pairs.
  HObjectModel3DArray SceneFlowCalib(const HImage& ImageRect1T1, const HImage& ImageRect2T1, const HImage& ImageRect1T2, const HImage& ImageRect2T2, const HImage& Disparity, const HTuple& SmoothingFlow, const HTuple& SmoothingDisparity, const HTuple& GenParamName, const HTuple& GenParamValue, const HCamPar& CamParamRect2, const HPose& RelPoseRect) const;

  // Compute the calibrated scene flow between two stereo image pairs.
  HObjectModel3D SceneFlowCalib(const HImage& ImageRect1T1, const HImage& ImageRect2T1, const HImage& ImageRect1T2, const HImage& ImageRect2T2, const HImage& Disparity, double SmoothingFlow, double SmoothingDisparity, const HString& GenParamName, const HString& GenParamValue, const HCamPar& CamParamRect2, const HPose& RelPoseRect) const;

  // Compute the calibrated scene flow between two stereo image pairs.
  HObjectModel3D SceneFlowCalib(const HImage& ImageRect1T1, const HImage& ImageRect2T1, const HImage& ImageRect1T2, const HImage& ImageRect2T2, const HImage& Disparity, double SmoothingFlow, double SmoothingDisparity, const char* GenParamName, const char* GenParamValue, const HCamPar& CamParamRect2, const HPose& RelPoseRect) const;

#ifdef _WIN32
  // Compute the calibrated scene flow between two stereo image pairs.
  HObjectModel3D SceneFlowCalib(const HImage& ImageRect1T1, const HImage& ImageRect2T1, const HImage& ImageRect1T2, const HImage& ImageRect2T2, const HImage& Disparity, double SmoothingFlow, double SmoothingDisparity, const wchar_t* GenParamName, const wchar_t* GenParamValue, const HCamPar& CamParamRect2, const HPose& RelPoseRect) const;
#endif

  // Compute an absolute pose out of point correspondences between world and image coordinates.
  HPose VectorToPose(const HTuple& WorldX, const HTuple& WorldY, const HTuple& WorldZ, const HTuple& ImageRow, const HTuple& ImageColumn, const HString& Method, const HTuple& QualityType, HTuple* Quality) const;

  // Compute an absolute pose out of point correspondences between world and image coordinates.
  HPose VectorToPose(const HTuple& WorldX, const HTuple& WorldY, const HTuple& WorldZ, const HTuple& ImageRow, const HTuple& ImageColumn, const HString& Method, const HString& QualityType, double* Quality) const;

  // Compute an absolute pose out of point correspondences between world and image coordinates.
  HPose VectorToPose(const HTuple& WorldX, const HTuple& WorldY, const HTuple& WorldZ, const HTuple& ImageRow, const HTuple& ImageColumn, const char* Method, const char* QualityType, double* Quality) const;

#ifdef _WIN32
  // Compute an absolute pose out of point correspondences between world and image coordinates.
  HPose VectorToPose(const HTuple& WorldX, const HTuple& WorldY, const HTuple& WorldZ, const HTuple& ImageRow, const HTuple& ImageColumn, const wchar_t* Method, const wchar_t* QualityType, double* Quality) const;
#endif

  // Calibrate the radial distortion.
  HXLDCont RadialDistortionSelfCalibration(const HXLDCont& Contours, Hlong Width, Hlong Height, double InlierThreshold, Hlong RandSeed, const HString& DistortionModel, const HString& DistortionCenter, double PrincipalPointVar);

  // Calibrate the radial distortion.
  HXLDCont RadialDistortionSelfCalibration(const HXLDCont& Contours, Hlong Width, Hlong Height, double InlierThreshold, Hlong RandSeed, const char* DistortionModel, const char* DistortionCenter, double PrincipalPointVar);

#ifdef _WIN32
  // Calibrate the radial distortion.
  HXLDCont RadialDistortionSelfCalibration(const HXLDCont& Contours, Hlong Width, Hlong Height, double InlierThreshold, Hlong RandSeed, const wchar_t* DistortionModel, const wchar_t* DistortionCenter, double PrincipalPointVar);
#endif

  // Compute a camera matrix from internal camera parameters.
  HHomMat2D CamParToCamMat(Hlong* ImageWidth, Hlong* ImageHeight) const;

  // Compute the internal camera parameters from a camera matrix.
  void CamMatToCamPar(const HHomMat2D& CameraMatrix, double Kappa, Hlong ImageWidth, Hlong ImageHeight);

  // Determine the 3D pose of a rectangle from its perspective 2D projection
  HPoseArray GetRectanglePose(const HXLD& Contour, const HTuple& Width, const HTuple& Height, const HString& WeightingMode, double ClippingFactor, HTuple* CovPose, HTuple* Error) const;

  // Determine the 3D pose of a rectangle from its perspective 2D projection
  HPose GetRectanglePose(const HXLD& Contour, double Width, double Height, const HString& WeightingMode, double ClippingFactor, HTuple* CovPose, HTuple* Error) const;

  // Determine the 3D pose of a rectangle from its perspective 2D projection
  HPose GetRectanglePose(const HXLD& Contour, double Width, double Height, const char* WeightingMode, double ClippingFactor, HTuple* CovPose, HTuple* Error) const;

#ifdef _WIN32
  // Determine the 3D pose of a rectangle from its perspective 2D projection
  HPose GetRectanglePose(const HXLD& Contour, double Width, double Height, const wchar_t* WeightingMode, double ClippingFactor, HTuple* CovPose, HTuple* Error) const;
#endif

  // Determine the 3D pose of a circle from its perspective 2D projection. 
  HTuple GetCirclePose(const HXLD& Contour, const HTuple& Radius, const HString& OutputType, HTuple* Pose2) const;

  // Determine the 3D pose of a circle from its perspective 2D projection. 
  HTuple GetCirclePose(const HXLD& Contour, double Radius, const HString& OutputType, HTuple* Pose2) const;

  // Determine the 3D pose of a circle from its perspective 2D projection. 
  HTuple GetCirclePose(const HXLD& Contour, double Radius, const char* OutputType, HTuple* Pose2) const;

#ifdef _WIN32
  // Determine the 3D pose of a circle from its perspective 2D projection. 
  HTuple GetCirclePose(const HXLD& Contour, double Radius, const wchar_t* OutputType, HTuple* Pose2) const;
#endif

  // Generate a projection map that describes the mapping of images corresponding to a changing radial distortion.
  HImage GenRadialDistortionMap(const HCamPar& CamParamOut, const HString& MapType) const;

  // Generate a projection map that describes the mapping of images corresponding to a changing radial distortion.
  HImage GenRadialDistortionMap(const HCamPar& CamParamOut, const char* MapType) const;

#ifdef _WIN32
  // Generate a projection map that describes the mapping of images corresponding to a changing radial distortion.
  HImage GenRadialDistortionMap(const HCamPar& CamParamOut, const wchar_t* MapType) const;
#endif

  // Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
  HImage GenImageToWorldPlaneMap(const HPose& WorldPose, Hlong WidthIn, Hlong HeightIn, Hlong WidthMapped, Hlong HeightMapped, const HTuple& Scale, const HString& MapType) const;

  // Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
  HImage GenImageToWorldPlaneMap(const HPose& WorldPose, Hlong WidthIn, Hlong HeightIn, Hlong WidthMapped, Hlong HeightMapped, const HString& Scale, const HString& MapType) const;

  // Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
  HImage GenImageToWorldPlaneMap(const HPose& WorldPose, Hlong WidthIn, Hlong HeightIn, Hlong WidthMapped, Hlong HeightMapped, const char* Scale, const char* MapType) const;

#ifdef _WIN32
  // Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
  HImage GenImageToWorldPlaneMap(const HPose& WorldPose, Hlong WidthIn, Hlong HeightIn, Hlong WidthMapped, Hlong HeightMapped, const wchar_t* Scale, const wchar_t* MapType) const;
#endif

  // Rectify an image by transforming it into the plane z=0 of a world coordinate system.
  HImage ImageToWorldPlane(const HImage& Image, const HPose& WorldPose, Hlong Width, Hlong Height, const HTuple& Scale, const HString& Interpolation) const;

  // Rectify an image by transforming it into the plane z=0 of a world coordinate system.
  HImage ImageToWorldPlane(const HImage& Image, const HPose& WorldPose, Hlong Width, Hlong Height, const HString& Scale, const HString& Interpolation) const;

  // Rectify an image by transforming it into the plane z=0 of a world coordinate system.
  HImage ImageToWorldPlane(const HImage& Image, const HPose& WorldPose, Hlong Width, Hlong Height, const char* Scale, const char* Interpolation) const;

#ifdef _WIN32
  // Rectify an image by transforming it into the plane z=0 of a world coordinate system.
  HImage ImageToWorldPlane(const HImage& Image, const HPose& WorldPose, Hlong Width, Hlong Height, const wchar_t* Scale, const wchar_t* Interpolation) const;
#endif

  // Transform image points into the plane z=0 of a world coordinate system.
  void ImagePointsToWorldPlane(const HPose& WorldPose, const HTuple& Rows, const HTuple& Cols, const HTuple& Scale, HTuple* X, HTuple* Y) const;

  // Transform image points into the plane z=0 of a world coordinate system.
  void ImagePointsToWorldPlane(const HPose& WorldPose, const HTuple& Rows, const HTuple& Cols, const HString& Scale, HTuple* X, HTuple* Y) const;

  // Transform image points into the plane z=0 of a world coordinate system.
  void ImagePointsToWorldPlane(const HPose& WorldPose, const HTuple& Rows, const HTuple& Cols, const char* Scale, HTuple* X, HTuple* Y) const;

#ifdef _WIN32
  // Transform image points into the plane z=0 of a world coordinate system.
  void ImagePointsToWorldPlane(const HPose& WorldPose, const HTuple& Rows, const HTuple& Cols, const wchar_t* Scale, HTuple* X, HTuple* Y) const;
#endif

  // Perform a hand-eye calibration.
  HPose HandEyeCalibration(const HTuple& X, const HTuple& Y, const HTuple& Z, const HTuple& Row, const HTuple& Col, const HTuple& NumPoints, const HPoseArray& RobotPoses, const HString& Method, const HTuple& QualityType, HPose* CalibrationPose, HTuple* Quality) const;

  // Perform a hand-eye calibration.
  HPose HandEyeCalibration(const HTuple& X, const HTuple& Y, const HTuple& Z, const HTuple& Row, const HTuple& Col, const HTuple& NumPoints, const HPoseArray& RobotPoses, const HString& Method, const HString& QualityType, HPose* CalibrationPose, double* Quality) const;

  // Perform a hand-eye calibration.
  HPose HandEyeCalibration(const HTuple& X, const HTuple& Y, const HTuple& Z, const HTuple& Row, const HTuple& Col, const HTuple& NumPoints, const HPoseArray& RobotPoses, const char* Method, const char* QualityType, HPose* CalibrationPose, double* Quality) const;

#ifdef _WIN32
  // Perform a hand-eye calibration.
  HPose HandEyeCalibration(const HTuple& X, const HTuple& Y, const HTuple& Z, const HTuple& Row, const HTuple& Col, const HTuple& NumPoints, const HPoseArray& RobotPoses, const wchar_t* Method, const wchar_t* QualityType, HPose* CalibrationPose, double* Quality) const;
#endif

  // Change the radial distortion of contours.
  HXLDCont ChangeRadialDistortionContoursXld(const HXLDCont& Contours, const HCamPar& CamParamOut) const;

  // Change the radial distortion of pixel coordinates.
  void ChangeRadialDistortionPoints(const HTuple& Row, const HTuple& Col, const HCamPar& CamParamOut, HTuple* RowChanged, HTuple* ColChanged) const;

  // Change the radial distortion of an image.
  HImage ChangeRadialDistortionImage(const HImage& Image, const HRegion& Region, const HCamPar& CamParamOut) const;

  // Determine new camera parameters in accordance to the specified radial distortion.
  HCamPar ChangeRadialDistortionCamPar(const HString& Mode, const HTuple& DistortionCoeffs) const;

  // Determine new camera parameters in accordance to the specified radial distortion.
  HCamPar ChangeRadialDistortionCamPar(const HString& Mode, double DistortionCoeffs) const;

  // Determine new camera parameters in accordance to the specified radial distortion.
  HCamPar ChangeRadialDistortionCamPar(const char* Mode, double DistortionCoeffs) const;

#ifdef _WIN32
  // Determine new camera parameters in accordance to the specified radial distortion.
  HCamPar ChangeRadialDistortionCamPar(const wchar_t* Mode, double DistortionCoeffs) const;
#endif

  // Compute the line of sight corresponding to a point in the image.
  void GetLineOfSight(const HTuple& Row, const HTuple& Column, HTuple* PX, HTuple* PY, HTuple* PZ, HTuple* QX, HTuple* QY, HTuple* QZ) const;

  // Project 3D points into (sub-)pixel image coordinates.
  void Project3dPoint(const HTuple& X, const HTuple& Y, const HTuple& Z, HTuple* Row, HTuple* Column) const;

  // Convert internal camera parameters and a 3D pose into a 3x4 projection matrix.
  HHomMat3D CamParPoseToHomMat3d(const HPose& Pose) const;

  // Deserialize the serialized internal camera parameters.
  void DeserializeCamPar(const HSerializedItem& SerializedItemHandle);

  // Serialize the internal camera parameters.
  HSerializedItem SerializeCamPar() const;

  // Read internal camera parameters from a file.
  void ReadCamPar(const HString& CamParFile);

  // Read internal camera parameters from a file.
  void ReadCamPar(const char* CamParFile);

#ifdef _WIN32
  // Read internal camera parameters from a file.
  void ReadCamPar(const wchar_t* CamParFile);
#endif

  // Write internal camera parameters into a file.
  void WriteCamPar(const HString& CamParFile) const;

  // Write internal camera parameters into a file.
  void WriteCamPar(const char* CamParFile) const;

#ifdef _WIN32
  // Write internal camera parameters into a file.
  void WriteCamPar(const wchar_t* CamParFile) const;
#endif

  // Simulate an image with calibration plate.
  HImage SimCaltab(const HString& CalPlateDescr, const HPose& CalPlatePose, Hlong GrayBackground, Hlong GrayPlate, Hlong GrayMarks, double ScaleFac) const;

  // Simulate an image with calibration plate.
  HImage SimCaltab(const char* CalPlateDescr, const HPose& CalPlatePose, Hlong GrayBackground, Hlong GrayPlate, Hlong GrayMarks, double ScaleFac) const;

#ifdef _WIN32
  // Simulate an image with calibration plate.
  HImage SimCaltab(const wchar_t* CalPlateDescr, const HPose& CalPlatePose, Hlong GrayBackground, Hlong GrayPlate, Hlong GrayMarks, double ScaleFac) const;
#endif

  // Project and visualize the 3D model of the calibration plate in the image.
  void DispCaltab(const HWindow& WindowHandle, const HString& CalPlateDescr, const HPose& CalPlatePose, double ScaleFac) const;

  // Project and visualize the 3D model of the calibration plate in the image.
  void DispCaltab(const HWindow& WindowHandle, const char* CalPlateDescr, const HPose& CalPlatePose, double ScaleFac) const;

#ifdef _WIN32
  // Project and visualize the 3D model of the calibration plate in the image.
  void DispCaltab(const HWindow& WindowHandle, const wchar_t* CalPlateDescr, const HPose& CalPlatePose, double ScaleFac) const;
#endif

  // Determine all camera parameters by a simultaneous minimization process.
  HCamPar CameraCalibration(const HTuple& NX, const HTuple& NY, const HTuple& NZ, const HTuple& NRow, const HTuple& NCol, const HPoseArray& NStartPose, const HTuple& EstimateParams, HPoseArray* NFinalPose, HTuple* Errors) const;

  // Determine all camera parameters by a simultaneous minimization process.
  HCamPar CameraCalibration(const HTuple& NX, const HTuple& NY, const HTuple& NZ, const HTuple& NRow, const HTuple& NCol, const HPose& NStartPose, const HTuple& EstimateParams, HPose* NFinalPose, double* Errors) const;

  // Extract rectangularly arranged 2D calibration marks from the image and calculate initial values for the external camera parameters.
  HTuple FindMarksAndPose(const HImage& Image, const HRegion& CalPlateRegion, const HString& CalPlateDescr, Hlong StartThresh, Hlong DeltaThresh, Hlong MinThresh, double Alpha, double MinContLength, double MaxDiamMarks, HTuple* CCoord, HPose* StartPose) const;

  // Extract rectangularly arranged 2D calibration marks from the image and calculate initial values for the external camera parameters.
  HTuple FindMarksAndPose(const HImage& Image, const HRegion& CalPlateRegion, const char* CalPlateDescr, Hlong StartThresh, Hlong DeltaThresh, Hlong MinThresh, double Alpha, double MinContLength, double MaxDiamMarks, HTuple* CCoord, HPose* StartPose) const;

#ifdef _WIN32
  // Extract rectangularly arranged 2D calibration marks from the image and calculate initial values for the external camera parameters.
  HTuple FindMarksAndPose(const HImage& Image, const HRegion& CalPlateRegion, const wchar_t* CalPlateDescr, Hlong StartThresh, Hlong DeltaThresh, Hlong MinThresh, double Alpha, double MinContLength, double MaxDiamMarks, HTuple* CCoord, HPose* StartPose) const;
#endif

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HCameraSetupModel& CameraSetupModelID, const HTuple& CameraIdx, const HTuple& CameraType, const HTuple& CameraPose) const;

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HCameraSetupModel& CameraSetupModelID, const HTuple& CameraIdx, const HString& CameraType, const HTuple& CameraPose) const;

  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HCameraSetupModel& CameraSetupModelID, const HTuple& CameraIdx, const char* CameraType, const HTuple& CameraPose) const;

#ifdef _WIN32
  // Define type, parameters, and relative pose of a camera in a camera setup model.
  void SetCameraSetupCamParam(const HCameraSetupModel& CameraSetupModelID, const HTuple& CameraIdx, const wchar_t* CameraType, const HTuple& CameraPose) const;
#endif

  // Set type and initial parameters of a camera in a calibration data model.
  void SetCalibDataCamParam(const HCalibData& CalibDataID, const HTuple& CameraIdx, const HTuple& CameraType) const;

  // Set type and initial parameters of a camera in a calibration data model.
  void SetCalibDataCamParam(const HCalibData& CalibDataID, const HTuple& CameraIdx, const HString& CameraType) const;

  // Set type and initial parameters of a camera in a calibration data model.
  void SetCalibDataCamParam(const HCalibData& CalibDataID, const HTuple& CameraIdx, const char* CameraType) const;

#ifdef _WIN32
  // Set type and initial parameters of a camera in a calibration data model.
  void SetCalibDataCamParam(const HCalibData& CalibDataID, const HTuple& CameraIdx, const wchar_t* CameraType) const;
#endif

};

}

#endif
