//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.05.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//


using HalconDotNet;

public partial class HDevelopExport
{
  // Chapter: Develop
  // Short Description: Changes the size of a graphics window with a given maximum and minimum extent such that it preserves the aspect ratio of the given image 
  public void dev_resize_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = new HTuple(), hv_Pointer = new HTuple();
    HTuple hv_Type = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_TempWidth = new HTuple();
    HTuple hv_TempHeight = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple();
    // Initialize local and output iconic variables 
    //This procedure adjusts the size of the current window
    //such that it fits into the limits specified by WidthLimit
    //and HeightLimit, but also maintains the correct image aspect ratio.
    //
    //If it is impossible to match the minimum and maximum extent requirements
    //at the same time (f.e. if the image is very long but narrow),
    //the maximum value gets a higher priority,
    //
    //Parse input tuple WidthLimit
    if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
    {
      hv_MinWidth.Dispose();
      hv_MinWidth = 500;
      hv_MaxWidth.Dispose();
      hv_MaxWidth = 800;
    }
    else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinWidth.Dispose();
      hv_MinWidth = 0;
      hv_MaxWidth.Dispose();
      hv_MaxWidth = new HTuple(hv_WidthLimit);
    }
    else
    {
      hv_MinWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinWidth = hv_WidthLimit.TupleSelect(
          0);
      }
      hv_MaxWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MaxWidth = hv_WidthLimit.TupleSelect(
          1);
      }
    }
    //Parse input tuple HeightLimit
    if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
    {
      hv_MinHeight.Dispose();
      hv_MinHeight = 400;
      hv_MaxHeight.Dispose();
      hv_MaxHeight = 600;
    }
    else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinHeight.Dispose();
      hv_MinHeight = 0;
      hv_MaxHeight.Dispose();
      hv_MaxHeight = new HTuple(hv_HeightLimit);
    }
    else
    {
      hv_MinHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinHeight = hv_HeightLimit.TupleSelect(
          0);
      }
      hv_MaxHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MaxHeight = hv_HeightLimit.TupleSelect(
          1);
      }
    }
    //
    //Test, if window size has to be changed.
    hv_ResizeFactor.Dispose();
    hv_ResizeFactor = 1;
    hv_Pointer.Dispose();hv_Type.Dispose();hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
    HOperatorSet.GetImagePointer1(ho_Image, out hv_Pointer, out hv_Type, out hv_ImageWidth, 
        out hv_ImageHeight);
    //First, expand window to the minimum extents (if necessary).
    if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
        hv_ImageHeight)))) != 0)
    {
      hv_ResizeFactor.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ResizeFactor = (((((hv_MinWidth.TupleReal()
          )/hv_ImageWidth)).TupleConcat((hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax()
          ;
      }
    }
    hv_TempWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
    }
    hv_TempHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
    }
    //Then, shrink window to maximum extents (if necessary).
    if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
        hv_TempHeight)))) != 0)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal()
          )/hv_TempWidth)).TupleConcat((hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin()
          );
      hv_ResizeFactor.Dispose();
      hv_ResizeFactor = ExpTmpLocalVar_ResizeFactor;
      }
      }
    }
    hv_WindowWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
    }
    hv_WindowHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
    }
    //Resize window
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetWindowExtents(HDevWindowStack.GetActive(), hv_Row, hv_Column, 
          hv_WindowWidth, hv_WindowHeight);
    }
    if (HDevWindowStack.IsOpen())
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);
      }
    }

    hv_MinWidth.Dispose();
    hv_MaxWidth.Dispose();
    hv_MinHeight.Dispose();
    hv_MaxHeight.Dispose();
    hv_ResizeFactor.Dispose();
    hv_Pointer.Dispose();
    hv_Type.Dispose();
    hv_ImageWidth.Dispose();
    hv_ImageHeight.Dispose();
    hv_TempWidth.Dispose();
    hv_TempHeight.Dispose();
    hv_WindowWidth.Dispose();
    hv_WindowHeight.Dispose();

    return;
  }

}
